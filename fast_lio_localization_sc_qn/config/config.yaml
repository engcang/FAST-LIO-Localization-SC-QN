basic:
  map_frame: "map"                              # publish frame
  map_match_hz: 2.0                             # Map match Hz
  saved_map: "/home/mason/kitti05.bag"          # directory should be in absolute path
  visualize_voxel_size: 0.3                     # voxel size for visualization

keyframe:
  keyframe_threshold: 1.5                       # unit [meter] every this distance, generate keyframe
  num_submap_keyframes: 5                       # how many subkeyframes are merged to ICP with current keyframe (closest-this ~ closest+this, if exists)

match:
  quatro_nano_gicp_voxel_resolution: 0.3        # voxel resolution to use Quatro and Nano-GICP matching
  scancontext_max_correspondence_distance: 35.0 # this is used for candidate trimming after ScanContext

nano_gicp:                                      # all values are from Nano-GICP official github (Direct LiDAR Odometry)
  thread_number: 0                              # if 0, max number of core
  icp_score_threshold: 1.0                      # lower is more accurate, for map-scan matching
  correspondences_number: 15
  max_correspondence_distance: 35.0             # this is also used for candidate trimming after ScanContext
  max_iter: 32
  transformation_epsilon: 0.01
  euclidean_fitness_epsilon: 0.01
  ransac:
    max_iter: 5
    outlier_rejection_threshold: 1.0

quatro:                                         # all values are from Quatro official github
  enable: true                                  # whether or not to use quatro, if false -> FAST-LIO-SAM-N (Nano-GICP only)
  optimize_matching: true                       # whether or not to use Optimized matching
  distance_threshold: 30.0                      # when optimized matching, use only correspondences within this radius, unit [meter]
  max_correspondences: 350                      # max correspondences to use for optimized matching
  fpfh_normal_radius: 0.6                       # should satisfy the following condition: fpfh_radius >= 1.5 * fpfh_normal_radius
  fpfh_radius: 0.9                              # should satisfy the following condition: fpfh_radius >= 1.5 * fpfh_normal_radius
  estimating_scale: false
  noise_bound: 0.3                              # The magnitude of uncertainty of measurements, the best is within v/2 ~ v (v: voxel resol.)
  rotation:
    num_max_iter: 50                            # Usually, rotation estimation converges within < 20 iterations
    gnc_factor: 1.4                             # Control the magnitue of the increase in non-linearity. The larger the value, the steeper the increase in nonlinearity.
    rot_cost_diff_threshold: 0.0001             # The cost threshold is compared with the difference between costs of consecutive iterations.
                                                # Once the diff. of cost < `rot_cost_diff_threshold`, then the optimization is finished.
